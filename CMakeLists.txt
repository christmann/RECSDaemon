cmake_minimum_required(VERSION 2.8)
project(RECSDaemon)

SET(MAJOR_VERSION 3)
SET(MINOR_VERSION 7)
SET(PATCH_VERSION 1)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

if ( ${CMAKE_SYSTEM_NAME} STREQUAL "Windows" )
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mno-ms-bitfields")
endif()

if ( ${BUILD_ARM} )
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build-arm)
set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE armhf)
set(CPACK_RPM_PACKAGE_ARCHITECTURE armhf)
else()
if ( ${BUILD_I386} )
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build-i386)
set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE i386)
set(CPACK_RPM_PACKAGE_ARCHITECTURE i386)
# CUSTOM i686 build
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_VERSION 1)
set(CMAKE_SYSTEM_PROCESSOR "i686")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32" CACHE STRING "c++ flags")
set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -m32" CACHE STRING "c flags")
set(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -L/lib32/")
LIST(APPEND CMAKE_SYSTEM_LIBRARY_PATH
  /usr/lib/i386-linux-gnu/
)
else()
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)
set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE amd64)
set(CPACK_RPM_PACKAGE_ARCHITECTURE x86_64)
endif()
endif()
 
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})
if (NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Windows" )
set(CMAKE_INSTALL_PREFIX /opt/RECSDaemon)
endif()
 
set(PROJECT_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include)
 
include_directories("${PROJECT_INCLUDE_DIR}")
include_directories("${PROJECT_SOURCE_DIR}")
 
add_subdirectory(daemon)

find_package (CGOS)
if (CGOS_FOUND)
	add_subdirectory(plugins/CommunicatorCongatec)
endif()
#find_package (KEAPI)
#if (KEAPI_FOUND)
#	add_subdirectory(plugins/CommunicatorKontron)
#endif()
find_package (SEMA)
if (SEMA_FOUND)
	add_subdirectory(plugins/CommunicatorAdlink)
endif()
add_subdirectory(plugins/CommunicatorDummy)
add_subdirectory(plugins/CommunicatorTCP)
add_subdirectory(plugins/SensorDummy)
add_subdirectory(plugins/SensorFileReader)
add_subdirectory(plugins/SensorProviderSystem)
add_subdirectory(plugins/SensorProviderZynqModule)
if ( ${CMAKE_SYSTEM_NAME} STREQUAL "Windows" )
	find_package(LibUSB)
	if (LIBUSB_FOUND)
		add_subdirectory(plugins/WindowsCommunicatorI2CTinyUSB)
	endif()
else()
	add_subdirectory(plugins/LinuxCommunicatorDev)
	add_subdirectory(plugins/LinuxSensorIP)
	add_subdirectory(plugins/LinuxSensorProviderEth)
	add_subdirectory(plugins/LinuxSlotDetectorGPIO)
	add_subdirectory(plugins/SensorProviderZynq)
	add_subdirectory(plugins/SensorProviderJetson)
endif()

if ( ${BUILD_TESTS} )
	add_subdirectory(deps/gtest)
	add_subdirectory(daemon/test)
endif()

IF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
INCLUDE(InstallRequiredSystemLibraries)
 
SET(CPACK_SET_DESTDIR "on")
SET(CPACK_PACKAGING_INSTALL_PREFIX "/tmp")
SET(CPACK_GENERATOR "DEB")
 
SET(CPACK_PACKAGE_DESCRIPTION "The RECSDaemon captures system monitoring data (CPU utilization, free RAM, disk space, IPs, ...) using plugins and sends the aquired data via the embedded management network to the RECS|Box management software.")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Allows sending system monitoring data to the RECS|Box management system")
SET(CPACK_PACKAGE_VENDOR "christmann informationstechnik + medien GmbH & Co. KG")
SET(CPACK_PACKAGE_CONTACT "Stefan.Krupop@christmann.info")
SET(CPACK_PACKAGE_VERSION_MAJOR "${MAJOR_VERSION}")
SET(CPACK_PACKAGE_VERSION_MINOR "${MINOR_VERSION}")
SET(CPACK_PACKAGE_VERSION_PATCH "${PATCH_VERSION}")
if ("${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}" STREQUAL "")
SET(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}")
else()
SET(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")
endif()
 
SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libssl1.0.0 (>= 1.0.0), libc6 (>= 2.1.3), libgcc1 (>= 1:4.1.1), libstdc++6 (>= 4.2.1)")
SET(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
SET(CPACK_DEBIAN_PACKAGE_SECTION "devel")
SET(CPACK_DEBIAN_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})
SET(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${CMAKE_CURRENT_SOURCE_DIR}/cmake/debian/postinst;${CMAKE_CURRENT_SOURCE_DIR}/cmake/debian/conffiles;" )
 
SET(CPACK_RPM_PACKAGE_RELOCATABLE false)
 
SET(CPACK_COMPONENTS_ALL Libraries ApplicationData)
INCLUDE(CPack)
 
ENDIF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
